
# Current problems <- 
# Hover info https://stackoverflow.com/questions/49495472/how-to-customize-hover-text-for-plotly-boxplots-in-r
require(shiny)
require(shinythemes)
require(tidyverse)
require(DT)
require(shinyalert)
require(shinyjs)

# Reading in pre-existing fruit ratings
#InitialData <- read.csv(file="data/Fruit_ratings.csv", header = TRUE, strip.white = TRUE) 



# Developing UI
ui <- fluidPage(
  theme = shinytheme("paper"),
  useShinyjs(), 
  navbarPage(
    "Rating fruits and their spread of quality",
    tabPanel("Input data",
             sidebarLayout(
               sidebarPanel(width = 5,
                            h4("Your fruit rating"), # Section heading
                            textInput("fruit", "Fruit to be judged", ""),
                            sliderInput("rating", "Rating out of 10", min = 1, max = 10, value = 5),
                            actionButton("submit", "Input results")
               ),
               mainPanel(width = 5, 
                         h4("Data inputs"), 
                         DT::dataTableOutput("datatable") # Outputs current table
               )
             ) 
    ), # finish first tab page
    tabPanel("Fruit Rating Overview", 
             mainPanel(width = 10, 
                       plotOutput(outputId = "overview_rating"), # Plots overview boxplot
                       DT::dataTableOutput("plotdata") # Outputs current table without date
             )
    ), # finish second tab page
    tabPanel("Fruit Rating Filtered", 
             mainPanel(width = 10, 
                       DT::dataTableOutput(outputId = "datatable_filt"), # Plots filtered dataset
                       plotOutput("filtered_rating") # Outputs filtered table
             ) 
    ) # finish third tab page
  )
) # finish UI


# Developing server
server <- function(input, output) { 
  

  
  ######################## Input Tab
  output$datatable <- renderDT({
    overview_plotting_df()
  }) # Renders table as a dataframe
  
  observe({
    shinyjs::toggleState("submit", !is.null(input$fruit) && input$fruit != "") # Prevents submit button from being pressed if 'fruit' is empty
  }) 
  
  #TmpData <- reactiveVal(data.frame(Date = Date(), Fruit = character(), Rating = numeric())) # Initiate dataset
  global <- reactiveValues(response = FALSE) # Initiate response for confirmation button
  
  observeEvent(input$submit, {
    shinyalert(
      title = "Confirm Submission",
      text = paste0("Are you sure you want to submit the rating of <b>",input$rating, "</b> for <b>", input$fruit, "</b>?"),
      html = TRUE,
      type = "warning",
      closeOnEsc = TRUE,
      closeOnClickOutside = TRUE,
      showCancelButton = TRUE,
      showConfirmButton = TRUE,
      confirmButtonText = "Confirm",
      cancelButtonText = "Cancel",
      animation = FALSE,
      callbackR = function(x) {
        global$response <- x
        if (global$response == TRUE) {shinyalert(title = "Saved", type = "success")}
        if (global$response == FALSE) {shinyalert(title = "Cancelled", type = "error")}
      } 
    ) # finish confirmation button
    
    observe({
      req(input$shinyalert) 
      
      if (global$response != FALSE) {
        new_entry <- data.frame(Date = as.Date(Sys.Date()), Fruit = input$fruit, Rating = as.numeric(input$rating)) # New input entry
        InitialData <- read.csv(file="data/Fruit_ratings.csv", header = TRUE, strip.white = TRUE) 
        InitialData(isolate(rbind(InitialData, new_entry))) # Binds the new entry to pre-existing dataset
        write.csv(InitialData, file="data/Fruit_ratings.csv", header = TRUE, strip.white = TRUE) 
        global$response <- FALSE # Resets the confirmation button
      } 
    }) # finish dataframe append
  })
  
  ######################## Overview Tab
  
  observeEvent(input$shinyalert, {
    print("inputted new data")
    print(paste("OLD", InitialData))
    InitialData <- read.csv(file="data/Fruit_ratings.csv", header = TRUE, strip.white = TRUE) 
    #Git_Fruitcsv <- getURL("https://raw.githubusercontent.com/KarinaGuo/Shiny_App/main/data/Fruit_ratings.csv")
    #InitialData <- read.csv(file=csv_loc, header = TRUE, strip.white = TRUE) 
    print(paste("global$response",global$response))
  })
  
  if (exists("InitialData_updated")) {
    overview_plotting_df <- reactive(data.frame(cbind("Fruit"=InitialData_updated$Fruit, "Rating"=as.numeric(InitialData_updated$Rating)))) # Create a new dataframe from previous without date column
  } else {
    overview_plotting_df <- reactive(data.frame(cbind("Fruit"=InitialData$Fruit, "Rating"=as.numeric(InitialData$Rating)))) # Create a new dataframe from previous without date column  
  }
  print(exists("InitialData_updated"))
  print(overview_plotting_df)
  
  output$plotdata <- renderDT({
    overview_plotting_df()
  }) # Renders table as a dataframe
  
  output$overview_rating <- renderPlot({
    #boxplot(as.numeric(overview_plotting_df()$Rating) ~ overview_plotting_df()$Fruit)  
    ggplot(data = overview_plotting_df(), mapping = aes(x=overview_plotting_df()$Fruit, y=as.numeric(overview_plotting_df()$Rating))) +
      geom_boxplot() +
      theme_minimal() +
      labs(y="Rating", x="Fruit") +
      scale_y_continuous(limits = c(1, 10), breaks = seq(1, 10, by = 1))
  }) # Renders the plot of all data
  
  
  #####
  InitialData <- read.csv(file="data/Fruit_ratings.csv", header = TRUE, strip.white = TRUE) 
  #InitialData <- read.csv(file=csv_loc, header = TRUE, strip.white = TRUE) 
  output$datatable_filt <- renderDT(
    InitialData %>% 
      mutate(Date = as.Date(Date)),
    rownames = FALSE,
    filter = 'top',
    caption = 'Filtered data entries') # Renders filtered table as a dataframe (filtered by user actively)
  
  output$filtered_rating <- renderPlot({
    filtered_data_ind <- input$datatable_filt_rows_all
    if (length(filtered_data_ind) > 0 && length(filtered_data_ind) < nrow(InitialData)) {
      filtered_data <- InitialData[filtered_data_ind, ]
      #boxplot(as.numeric(filtered_data$Rating) ~ filtered_data$Fruit)
      ggplot(data = filtered_data, mapping = aes(x=Fruit, y=as.numeric(Rating))) +
        geom_boxplot() +
        theme_minimal() +
        labs(y="Rating", x="Fruit") +
        scale_y_continuous(limits = c(1, 10), breaks = seq(1, 10, by = 1))
    } # Renders plot of filtered data
  })
}


# Create shiny object
shinyApp(ui=ui, server=server)
